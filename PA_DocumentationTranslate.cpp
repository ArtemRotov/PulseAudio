// ----------------------------------  def.h   ------------------------------------------------------
/* Playback and record buffer metrics
typedef struct pa_buffer_attr {

    uint32_t maxlength;
        Максимальная длина буфера в байтах. Установка этого значения
    в (uint32_t) -1 инициализирует его до максимального значения, поддерживаемого
    сервером, которое рекомендуется. В строгих сценариях воспроизведения с низкой
    задержкой вы можете захотеть установить для этого меньшее значение, вероятно,
    вместе с флагом PA_STREAM_ADJUST_LATENCY. Если вы сделаете это, вы гарантируете,
    что задержка не превысит допустимую для данного варианта использования величину
    за счет увеличения недозатрат(?), если задержка ниже той, с которой сервер может
    надежно справиться.

    uint32_t tlength;
        Только для воспроизведения: целевая длина буфера. Сервер пытается гарантировать,
    что по крайней мере tlength байт всегда доступны в буфере воспроизведения для каждого
    потока на стороне сервера. Рекомендуется установить для этого значение (uint32_t) -1,
    которое инициализирует это значение до значения, которое сервер считает разумным.
    Однако по умолчанию это значение будет равно чему-то вроде 2s, т.е. для приложений,
    предъявляющих особые требования к задержке, это значение должно быть установлено на
    максимальную задержку, с которой может справиться приложение. Если параметр
    PA_STREAM_ADJUST_LATENCY не установлен, это значение будет влиять только на размер
    буфера воспроизведения для каждого потока. Когда задано значение PA_STREAM_ADJUST_LATENCY,
    общая задержка приемника плюс размер буфера воспроизведения настраиваются на это значение.
    Установите PA_STREAM_ADJUST_LATENCY, если вы заинтересованы в регулировке общей задержки.
    Не устанавливайте его, если вы заинтересованы в настройке размера буфера воспроизведения
    на стороне сервера для каждого потока.

    uint32_t prebuf;
        Только воспроизведение: предварительная буферизация. Сервер не начнет воспроизведение
    до тех пор, пока в буфере не будет доступно по крайней мере байт предварительной записи.
    Рекомендуется установить для этого значение (uint32_t) -1, которое инициализирует его тем
    же значением, что и tlength, каким бы оно ни было. Инициализируйте значение 0, чтобы включить
    ручное управление запуском/остановкой потока. Это означает, что воспроизведение не остановится
    при недостаточном запуске и воспроизведение не начнется автоматически. Вместо этого
    pa_stream_cork() должен быть вызван явно. Если вы установите это значение равным 0, вы также
    должны установить PA_STREAM_START_СORKED.

    uint32_t minreq;
        Только воспроизведение: минимальный запрос. Сервер не запрашивает у клиента меньше minreq байт,
    вместо этого ожидает, пока буфер не освободится достаточно, чтобы запросить больше байтов сразу.
    Рекомендуется установить для этого значение (uint32_t) -1, которое инициализирует это значение до
    значения, которое сервер считает разумным. Это значение должно быть установлено на значение,
    которое дает PulseAudio достаточно времени для перемещения данных из буфера воспроизведения для
    каждого потока в буфер аппаратного воспроизведения.

    uint32_t fragsize;
        Только запись: размер фрагмента. Сервер отправляет данные блоками размером в fragsize байт.
    Большие значения уменьшают интерактивность с другими операциями в контексте подключения, но
    уменьшают накладные расходы на управление. Рекомендуется установить для этого значение (uint32_t)-1,
    которое инициализирует это значение до значения, которое сервер считает разумным. Однако по
    умолчанию это значение будет равно чему-то вроде 2s, т.е. для приложений, предъявляющих особые
    требования к задержке, это значение должно быть установлено на максимальную задержку, с которой
    может справиться приложение. Если задано значение PA_STREAM_ADJUST_LATENCY, общая задержка
    источника будет скорректирована в соответствии с этим значением. Если он не установлен, задержка
    источника остается неизмененной.

} pa_buffer_attr;   */

// ----------------------------------  def.h/end    ---------------------------------------------------


/* Подготовить запись данных на сервер (для воспроизведения потоков). Эту функцию можно использовать для
оптимизации количества копий памяти при воспроизведении ("нулевое копирование"). Рекомендуется вызывать
эту функцию перед каждым вызовом pa_stream_write(). Передайте адрес указателю и адресу количества байтов,
которые вы хотите записать. По возвращении два значения будут содержать указатель, куда вы можете
поместить данные для записи, и максимальное количество байтов, которые вы можете записать. \a *nbytes
может быть меньше или иметь то же значение, которое вы передали. Вы должны иметь возможность обрабатывать
оба случая. Доступ к памяти за пределами возвращенного значения \a *nbytes недопустим.
 Доступ к памяти, возвращенной после следующего pa_stream_write() или pa_stream_cancel_write(),
недействителен. При вызове необходимо инициализировать только \a *nbytes, при возврате будут действительны
как *data, так и *nbytes. Если вы поместите (size_t) -1 в *nbytes при вызове, размер памяти будет выбран
автоматически (что рекомендуется делать). После помещения ваших данных в возвращенную область памяти
вызовите pa_stream_write() с набором данных \a для адреса в этой области памяти и значением \a nbytes,
которое меньше или равно тому, что было возвращено этой функцией, чтобы фактически выполнить запись.
Вызов pa_stream_write() должен следовать "быстро" за pa_stream_begin_write(). Не рекомендуется проводить
неограниченное количество времени после вызова pa_stream_begin_write() и до вызова pa_stream_write().
Если вы хотите отменить ранее вызванный pa_stream_begin_write() без вызова pa_stream_write(), используйте
pa_stream_cancel_write(). Двойной вызов pa_stream_begin_write() без вызова pa_stream_write() или
pa_stream_cancel_write() вернет точно такие же значения \a data pointer и \anbytes. Эта функция может
использоваться для оптимизации количества копий памяти при воспроизведении («нулевое копирование»).
Рекомендуется вызывать эту функцию перед каждым вызовом pa_stream_write(). Передайте адрес указателю
и адресу количества байтов, которые вы хотите записать. По возвращении два значения будут содержать
указатель, куда вы можете поместить данные для записи, и максимальное количество байтов, которые вы
можете записать. \a *nbytes может быть меньше или иметь то же значение, которое вы передали. Вы должны
иметь возможность обрабатывать оба случая.
*/
